application.onAppStart = function(){		enterID=[3,2,1,0];	this.maxClients = 4;	connectIDS=["empty", "empty", "empty", "empty"];	playerNames=[];		roomCounter = 1;	};application.onConnect = function(currentClient, username, cliID){	 	var nClients = application.clients.length;	 	 	if( nClients + 1 > application.maxClients )		{		 	trace("Too many users, rejecting client.");				 	this.rejectConnection( currentClient);		 } else {			 trace("Allow User");			 currentClient.cliNow = enterID.pop();			 connectIDS[currentClient.cliNow] = cliID;			 currentClient.name = username;			 application.acceptConnection( currentClient );			 				 			 		}        var myFileName = new String();        myFileName = application.clients[0].name+"-moves.txt";              	var serverTextFile = new File(myFileName);       // var deadFile = new File(myCaptured);        		currentClient.WriteNow = function(cliMsg)   		{			serverTextFile.open("text", "append");			if (serverTextFile.isOpen)         			{				serverTextFile.write(cliMsg);				serverTextFile.close( );                application.broadcastMsg("readFromServer");			}		}				currentClient.notifyClients = function()		{			application.broadcastMsg("newConnection", connectIDS, currentClien.cliNow);		}               		currentClient.ReadNow = function( )   		{			serverTextFile.open("text", "read");					if (serverTextFile.isOpen)         			{ 				contentNow = serverTextFile.readAll( );				serverTextFile.close( );				return contentNow;			} 		}                       	       currentClient.streamSelect = function()	   {		 return currentClient.cliNow;	   }	   	   currentClient.rtmfpIDS = function()	   {			return connectIDS;   	   }       currentClient.callTheServer = function()       {                    }       currentClient.serverUndo = function()       {               application.broadcastMsg("undoFromServer");       }			currentClient.whoGoesNext = function()		{			if(roomCounter + 1 <= application.clients.length)			{				roomCounter ++;						} else {				roomCounter = 1;			}					application.broadcastMsg("nextTurn", roomCounter);		}                								};application.loopBroadcast = function(s){       application.broadcastMsg("movePiece", s);}application.onDisconnect = function(currentClient){	connectIDS[currentClient.cliNow] = "empty";	enterID.push(currentClient.cliNow);		application.broadcastMsg("clientDisconnect", connectIDS);	};