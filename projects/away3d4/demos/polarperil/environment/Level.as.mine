package
environment
{

	import agt.debug.DebugMaterialLibrary;
	import agt.debug.DebugMeshInfo;
	import agt.parsing.GameLevel;
	import agt.physics.PhysicsScene3D;
	import agt.physics.entities.DynamicEntity;

	import away3d.containers.ObjectContainer3D;

	import away3d.entities.Mesh;
	import away3d.materials.BitmapMaterial;
	import away3d.materials.DefaultMaterialBase;
	import away3d.materials.methods.FogMethod;
	import away3d.materials.methods.FresnelEnvMapMethod;
	import away3d.materials.methods.FresnelSpecularMethod;
	import away3d.materials.methods.ShadingMethodBase;
	import away3d.primitives.SkyBox;
	import away3d.primitives.Sphere;

	import awayphysics.collision.shapes.AWPBoxShape;
	import awayphysics.collision.shapes.AWPCollisionShape;

	import characters.PenguinCharacter;

	import flash.geom.Vector3D;

	import loading.ResourceManager;

	import materials.HotSpringMaterial;

	import materials.methods.NearShadowMapMethod;

	public class Level extends GameLevel
	{
		[Embed(source="/../assets/level/snowgloss.png")]
		private var GlossMap:Class;

		[Embed(source="/../assets/level/snowalbedo.png")]
		private var SnowMap:Class;

		[Embed(source="/../assets/level/snownormals.png")]
		private var SnowNormals:Class;

		[Embed(source="/../assets/level/rockcliff_NRM.jpg")]
		private var CliffNormals:Class;

		[Embed(source="/../assets/level/rockcliff_SPEC.jpg")]
		private var CliffSpecular:Class;

		[Embed(source="/../assets/level/fallentree_NRM.jpg")]
		private var LogNormals:Class;

		[Embed(source="/../assets/level/PlayGrounSand4_512.jpg")]
		private var SandTexture:Class;

		[Embed(source="/../assets/level/2563-normal.jpg")]
		private var SandNormals:Class;

		private static var _envMapMethod:FresnelEnvMapMethod;

		private var _lights:Array;
		private var _fog:FogMethod;
		private var _shadowMethod:NearShadowMapMethod;
		private var _iceCubeShape:AWPCollisionShape;
		private var _resources:ResourceManager;
		private const USE_ADVANCED_MATERIALS:Boolean = true;

		public function Level(scene:PhysicsScene3D, resources:ResourceManager, lights:Array, shadowMethod:NearShadowMapMethod)
		{
			_resources = resources;
			super(scene, _resources.levelMesh);
			_lights = lights;
			_shadowMethod = shadowMethod;

			// TODO: fog not working
//			_fog = new FogMethod(100000);

			_iceCubes = new Vector.<DynamicEntity>();

			_scene.addChild(new SkyBox(new SkyboxTexture()));
		}

		// -----------------------
		// objects
		// -----------------------

		private var _springPosition:Vector3D;

		public function parseTypeSpring(obj:ObjectContainer3D):void
		{
			var mesh:Mesh = Mesh(obj);
			mesh.geometry.subGeometries[0].scaleUV(3);
			mesh.material = new HotSpringMaterial();
			mesh.material.lights = _lights;
			addFog(BitmapMaterial(mesh.material));
			_scene.addChild(mesh);

			// remember spring position
			_springPosition = obj.position.clone();
		}

		public function parseTypeIcecube(obj:ObjectContainer3D):void
		{
			createIceCube(obj.position);
		}

		// -----------------------
		// materials
		// -----------------------

		private var _spruceTrunkMaterial:BitmapMaterial;

		public function parseSurfaceSprucetrunk(mat:BitmapMaterial):void
		{
			if(_spruceTrunkMaterial)
				return;
			else
				_spruceTrunkMaterial = mat;

//			mat.shadowMethod = _shadowMethod; // crash

			defaultMatSettings(mat);
		}

		private var _rockMaterial:BitmapMaterial;

		public function parseSurfaceRock(mat:BitmapMaterial):void
		{
			if(_rockMaterial)
				return;
			else
				_rockMaterial = mat;

			defaultMatSettings(mat);
		}

		private var _snowMaterial:BitmapMaterial;

		public function parseSurfaceSnow(mat:BitmapMaterial):void
		{
			if(_snowMaterial)
				return;
			else
				_snowMaterial = mat;

			defaultMatSettings(mat);

			mat.lights = _lights;
			mat.repeat = true;
			mat.ambient = 1;
			mat.ambientColor = 0x505090;
			if(USE_ADVANCED_MATERIALS)
			{
				mat.specularMethod = new FresnelSpecularMethod();
				FresnelSpecularMethod(mat.specularMethod).normalReflectance = .1;
			}
			mat.specular = 1;
			mat.gloss = 150;
			mat.repeat = true;
			mat.normalMap = new SnowNormals().bitmapData;
			mat.glossMap = new GlossMap().bitmapData;
			mat.shadowMethod = _shadowMethod;
		}

		private var _sandMaterial:BitmapMaterial;

		public function parseSurfaceSand(mat:BitmapMaterial):void
		{
			if(_sandMaterial)
				return;
			else
				_sandMaterial = mat;

			defaultMatSettings(mat);

			mat.lights = _lights;
			mat.bitmapData = new SandTexture().bitmapData;
			mat.normalMap = new SandNormals().bitmapData;
			mat.specular = .7;
			mat.gloss = 70;
			mat.specularMap = new GlossMap().bitmapData;
			mat.repeat = true;
//			mat.shadowMethod = _shadowMethod; // weird red snow
		}

		private var _cliffMaterial:BitmapMaterial;

		public function parseSurfaceCliff(mat:BitmapMaterial):void
		{
			if(_cliffMaterial)
				return;
			else
				_cliffMaterial = mat;

			defaultMatSettings(mat);

			mat.lights = _lights;
			mat.normalMap = new CliffNormals().bitmapData;
			mat.specularMap = new CliffSpecular().bitmapData;
			mat.specular = 0.6;
			mat.specularColor = 0xCCCCCC;

//			mat.shadowMethod = _shadowMethod; // causes weird red snow
		}

		private var _logMaterial:BitmapMaterial;

		public function parseSurfaceLog(mat:BitmapMaterial):void
		{
			if(_logMaterial)
				return;
			else
				_logMaterial = mat;

			defaultMatSettings(mat);

			mat.lights = _lights;
			mat.normalMap = new LogNormals().bitmapData;
		}

		private var _spruceLeavesMaterial:BitmapMaterial;

		public function parseSurfaceSpruceleaves(mat:BitmapMaterial):void
		{
			if(_spruceLeavesMaterial)
				return;
			else
				_spruceLeavesMaterial = mat;

			defaultMatSettings(mat);

			mat.lights = _lights;
			mat.normalMap = new LogNormals().bitmapData;
			mat.specular = .1;
		}

		public function parseReceivesshadowTrue(mat:DefaultMaterialBase):void
		{
			// check has method of type xxx
			/*var len:uint = mat.numMethods;
			 var hasMethod:Boolean = false;
			 for(var i:uint; i < len; ++i)
			 {
			 var method:ShadingMethodBase = mat.getMethodAt(i);
			 if(method is ProjectiveTextureMethod)
			 {
			 hasMethod = true;
			 break;
			 }
			 }*/

			// create method if necessary
			/*if(!hasMethod)
			 {
			 //				mat.shadowMethod = _shadowMethod; // TODO: Register crash!
			 }*/
		}

		// -----------------------
		// public
		// -----------------------

		public function get fog():FogMethod
		{
			return _fog;
		}

		private var _cubeSpawnPoint:Vector3D = new Vector3D(-800, 300, -100);

		public function spawnABunchOfIceCubes():void
		{
			var numX:int = 3;
			var numY:int = 1;
			var numZ:int = 4;
			var dw:Number = 1.5 * _cubeScale * _cubeDimensions.x;
			var dh:Number = 1.5 * _cubeScale * _cubeDimensions.y;
			var dd:Number = 1.5 * _cubeScale * _cubeDimensions.z;
			for(var i:uint = 0; i < numX; i++)
			{
				for(var j:int = 0; j < numZ; j++)
				{
					var x:Number = _cubeSpawnPoint.x + i * dw;
					var z:Number = _cubeSpawnPoint.z + j * dd;

					for(var k:int = 0; k < numY; k++)
					{
						var y:Number = _cubeSpawnPoint.y + k * dh;
						createIceCube(new Vector3D(x, y, z).add(new Vector3D(rand(-200, 200), 0, rand(-200, 200))));
					}
				}
			}
		}

		private var _penguins:Vector.<PenguinCharacter>;
		private var _penguinSpawnPoint:Vector3D = new Vector3D(-800, 500, -200);

		public function createPenguins():void
		{
			_penguins = new Vector.<PenguinCharacter>();
			for(var i:uint; i < 3; ++i)
				createPenguin(_penguinSpawnPoint.add(new Vector3D(rand(-200, 200), 0, rand(-200, 200))));
		}

		public function update():void
		{
			var i:int, len:uint;

			// update penguins
			len = _penguins.length;
			var penguin:PenguinCharacter;
			for(i = 0; i < len; ++i)
			{
				penguin = _penguins[i];

				// update controller
				penguin.controller.update();

				// avoid falling
				if(penguin.entity.container.x > 200)
					penguin.entity.position = new Vector3D(200, penguin.entity.container.y, penguin.entity.container.z);
			}

			// update cubes
			len = _iceCubes.length;
			var saved:Vector.<DynamicEntity> = new Vector.<DynamicEntity>();
			var savedIndices:Vector.<uint> = new Vector.<uint>();
			var cube:DynamicEntity;
			for(i = 0; i < len; ++i)
			{
				cube = _iceCubes[i];

				// check fallen
				if(cube.container.y < -2000)
				{
					cube.body.position = _cubeSpawnPoint;
					cube.body.linearVelocity = new Vector3D();
				}
				else
				{
					// check saved
					var toSpring:Vector3D = cube.body.position.clone();
					toSpring = toSpring.subtract(_springPosition);
					var dis:Number = toSpring.length;
					if(dis < 275)
					{
						var vel:Number = cube.body.linearVelocity.length;
						if(vel == 0)
						{
							saved.push(cube);
							savedIndices.push(i);
						}
					}
				}
			}

			// swap saved cubes for live penguins
			if(saved.length > 0)
			{
				for(i = saved.length - 1; i >= 0; i--)
				{
					// remove cube
					trace(i + "/" + saved.length);
					cube = saved[i];
					_scene.removeDynamicEntity(cube);
					_iceCubes.splice(savedIndices[i], 1);

					// add penguin
					createPenguin(cube.body.position);

					cube = null;
				}
			}
		}

		// -----------------------
		// private
		// -----------------------

		private function createPenguin(position:Vector3D):void
		{
			var mesh:Mesh = _resources.penguinMesh.clone() as Mesh;
			mesh.material.lights = _lights;
			var enemy:PenguinCharacter = new PenguinCharacter(mesh.clone() as Mesh, _resources.penguinIdleAnimation, _resources.penguinWalkAnimation, _resources.penguinRunAnimation, _resources.penguinAnimationState);
			enemy.entity.position = position;
			_scene.addCharacterEntity(enemy.entity);
			_penguins.push(enemy);
		}

		private var _cubeDimensions:Vector3D;
		private var _cubeScale:Number = 3;
		private var _iceCubes:Vector.<DynamicEntity>;

		private function createIceCube(position:Vector3D):void
		{
			var mesh:Mesh = _resources.iceCubeMesh.clone() as Mesh;
			mesh.scale(_cubeScale);
			DebugMeshInfo.traceObjectHierarchy(mesh);

			var penguin:Mesh = mesh.getChildAt(0) as Mesh;
			penguin.material.lights = _lights;

			if(!_iceCubeShape)
			{
				_cubeDimensions = mesh.bounds.max.subtract(mesh.bounds.min);
				_iceCubeShape = new AWPBoxShape(_cubeDimensions.x, _cubeDimensions.y, _cubeDimensions.z);
			}

			var entity:DynamicEntity = new DynamicEntity(_iceCubeShape, mesh, 0.1);
			entity.body.position = position;
			entity.body.friction = 0.5;
			_scene.addDynamicEntity(entity);

			if(!_envMapMethod && USE_ADVANCED_MATERIALS)
			{
				BitmapMaterial(mesh.material).alphaBlending = true;
				BitmapMaterial(mesh.material).lights = _lights;
				BitmapMaterial(mesh.material).ambient = 1;
				BitmapMaterial(mesh.material).ambientColor = 0x505090;
				addFog(BitmapMaterial(mesh.material));
				_envMapMethod = new FresnelEnvMapMethod(SkyboxTexture.getInstance());
				BitmapMaterial(mesh.material).addMethod(_envMapMethod);
				_envMapMethod.normalReflectance = 0;
			}

			_iceCubes.push(entity);
		}

		private function rand(min:Number, max:Number):Number
		{
			return (max - min) * Math.random() + min;
		}

		private function addFog(mat:DefaultMaterialBase):void
		{
			if(!_fog || !USE_ADVANCED_MATERIALS)
				return;

			// check has method of type xxx
			var len:uint = mat.numMethods;
			var hasMethod:Boolean = false;
			for(var i:uint; i < len; ++i)
			{
				var method:ShadingMethodBase = mat.getMethodAt(i);
				if(method is FogMethod)
				{
					hasMethod = true;
					break;
				}
			}

			// create method if necessary
			if(!hasMethod)
				mat.addMethod(_fog);
		}

		private function defaultMatSettings(mat:DefaultMaterialBase):void
		{
			mat.ambient = 1;
			mat.ambientColor = 0x202030;
			mat.specular = .3;

			mat.lights = _lights;

			addFog(mat);
		}
	}
}
